[
  {esi_box, [
      {config,  #{db_file=>"config_test.db",
                  master_key=> <<"none">>,
                  timeout => 10000,
                  redirect_url => "http://localhost/teki_auth",
                  application_id => "1730e2205274469eb8fe5b737f27cd10",
                  auth_token => "MTczMGUyMjA1Mjc0NDY5ZWI4ZmU1YjczN2YyN2NkMTA6czF4WGVVWXl2M2c2a2V1ajd4ZzZUMTJTUW5yVE9iczdncmtHeEUxVA==",
                  scope => "publicData%20esi-skills.read_skills.v1%20esi-fittings.read_fittings.v1"}
      }
    ]},
  {teki, [{characters_dir, "characters"}]},
  {eve_sde, [
    {server_name, eve_sde},
    {use_as_sde_server_config, true}, %% use app config as gen_server config
    {root, "sde/"}, %% sde root path
    {options, []}, %% decode options for
      %% tables section
    {tables, [
      #{yaml_file => "fsd/categoryIDs.yaml", %% path to yaml file
        ets_file => "categoryIDs.parsed", %% optional
        table => #{ name => category_id, options => []}, %% optional
        type => map, %% map or list
        %% spec
        %%  for list type - {MergeKeys, EtsMatchSpec}
        %%  for map type - {KeysToDrop, EtsMatchSpec}
        spec => {[],
          [{ {'$1', '$2'},
            [],
            [
              {{'$1',
                {map_get, <<"en">>, {map_get, <<"name">>, '$2'}}
              }}
            ]
          }]}
      },

      #{
        yaml_file => "bsd/dgmAttributeTypes.yaml", %% path to yaml file
        table => #{name => attr}, %% optional
        type => list, %% map or list
        spec =>{[<<"attributeID">>], [{ '$1',
                  [],
                  ['$1']
        }]}
      },
      #{
        yaml_file => "bsd/dgmEffects.yaml", %% path to yaml file
        table => #{name => effect}, %% optional
        type => list, %% map or list
        spec =>{[<<"effectID">>], [{ '$1',
                  [],
                  ['$1']
        }]},
        final_fun => {teki, prep_eff_start, []}
      },

      #{yaml_file => "fsd/groupIDs.yaml", %% path to yaml file
        table => #{ name => group_id}, %% optional
        type => map, %% map or list
        %% spec
        %%  for list type - {MergeKeys, EtsMatchSpec}
        %%  for map type - {KeysToDrop, EtsMatchSpec}
        spec => {[],
          [{ {'$1', '$2'},
            [],
            [
              {{'$1',
                {map_get, <<"categoryID">>, '$2'}
              }}
            ]
          }]}
      },
      #{yaml_file => "fsd/typeIDs.yaml", %% path to yaml file
        table => #{ name => type_id}, %% optional
        type => map, %% map or list
        split_by_records => {0, 50000},
        %% spec
        %%  for list type - {MergeKeys, EtsMatchSpec}
        %%  for map type - {KeysToDrop, EtsMatchSpec}
        spec => {[[<<"description">>,<<"basePrice">>]],
          [{ '$1',
                    [],
                    ['$1']
          }]}
      },

      #{
        yaml_file => "bsd/dgmTypeEffects.yaml", %% path to yaml file
        table => #{name => type_effect}, %% optional
        type => list, %% map or list
        spec =>{[<<"typeID">>, {<<"effectID">>, <<"isDefault">>}], [{ '$1',
                  [],
                  ['$1']
        }]}
      },
      #{
        yaml_file => "bsd/dgmTypeAttributes.yaml", %% path to yaml file
        table => #{name => type_attr}, %% optional
        type => list, %% map or list
        spec =>{[<<"typeID">>, <<"attributeID">>], [{ '$1',
                  [],
                  ['$1']
        }]},
        final_fun => {teki, prep_attr_start, []}
      },
      #{
        yaml_file => "bsd/dgmExpressions.yaml", %% path to yaml file
        table => #{name => expression}, %% optional
        type => list, %% map or list
        spec =>{[<<"expressionID">>], [{ '$1',
                  [],
                  ['$1']
        }]}
      }
      ]
    }
  ]},
  {sasl, [
         {errlog_type, error}
        ]}
].
